<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2016 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<part id="part-howto">
  <title>How-to</title>

  <chapter id="ch-howto-command">
    <title>Writing your own commands</title>

    <para>A Geomajas command usually consist of three classes, the actual
    command (which implements the <code>Command</code> interface,
        preferable even the <code>CommandHasRequest</code> interface), and two
    data transfer objects, one to pass the request parameters (extending
    <code>CommandRequest</code>, <code>LayerIdCommandRequest</code> or
    <code>LayerIdsCommandRequest</code>), and one which carries the response
    (extending <code>CommandResponse</code>).</para>

    <para>It is important to assure your request object extends from
    LayerIdCommandRequest or LayerIdsRequest when one of the parameters is the
    layer id (or a list thereof). This can be used by the command dispatcher
    to assure the layer specific (transaction) interceptors are called.</para>

    <para>To create a new command we recommend you use a similar package
    structure as we used in the geomajas-extension-command module. That is to
    create a "command" package with under that a "dto" package which contains
    all the request and response objects, and to put the actual commands in
    sub packages based on some kind of grouping. This helps to automatically
    determine a sensible command name.</para>

    <para>The basic command implementation looks like this:</para>

    <xi:include href="listing/ExampleCommand.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>Note the presence of the "@Component" annotation which assures the
    command is registered. You could add the name under which the command
    needs to be registered in the annotation, but when that is omitted, the
    default command name is derived from the fully qualified class name. In
    the example given here this results in command name
    "command.mysuper.DoIt".</para>

    <para>The default way to determine the command name assumes there is a
    package named "command" in the fully qualified name of the implementing
    class. It will remove everything before that. It will then remove a
    "Command" suffix if any. Lastly, it will remove duplication between the
    intermediate package (between "command" and the class name) and the class
    name itself. Some examples:</para>

    <para>
      <table>
        <title>Samples of command name resolution</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Fully qualified class name</entry>

              <entry>Command name</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>my.app.command.DoIt</entry>

              <entry>command.DoIt</entry>
            </row>

            <row>
              <entry>my.app.command.super.DoIt</entry>

              <entry>command.super.DoIt</entry>
            </row>

            <row>
              <entry>my.app.command.super.DoItCommand</entry>

              <entry>command.super.DoIt</entry>
            </row>

            <row>
              <entry>my.app.command.super.SuperDoItCommand</entry>

              <entry>command.super.DoIt</entry>
            </row>

            <row>
              <entry>my.app.command.super.DoItSuperCommand</entry>

              <entry>command.super.DoIt</entry>
            </row>

            <row>
              <entry>my.app.command.super.CommandDoIt</entry>

              <entry>command.super.CommandDoIt</entry>
            </row>

            <row>
              <entry>my.app.command.super.CommandSuperDoIt</entry>

              <entry>command.super.CommandSuperDoIt</entry>
            </row>

            <row>
              <entry>my.app.command.super.CommandDoItSuper</entry>

              <entry>command.super.CommandDoIt</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>

    <para>You have to include a line in your Spring configuration to scan
    class files for annotation to make the components available. For the case
    above, this could be done by including the following XML fragment in one
    of your Spring configuration files.</para>

	  <example id="ExampleCommandScan">
		  <title>Scan to assure command is available</title>
		  <programlisting language="xml"><![CDATA[<context:component-scan base-package="com.my.program"
    name-generator="org.geomajas.spring.GeomajasBeanNameGenerator" />]]></programlisting>
	  </example>


	  <para>The command will be executed using a singleton. The use of object
    variables is not recommended. Any object variables will be shared amongst
    all command invocation, which can be coming from multiple threads at the
    same time.</para>

    <para>Note that it is not mandatory to create your own request and
    response object classes. If you don't require any parameters you can use
    <code>EmptyCommandRequest</code> as request class. If you only require a
    layer id, then use <code>LayerIdCommandRequest</code>. If you only return
    a success code, you could use the <code>SuccessCommandResponse</code>
    class.</para>

    <para>You have to take care that all objects that are referenced by your
    request and response objects are actually serializable for the clients in
    which the commands need to be used. For GWT you
    have to assure the no-arguments constructor exists and that the class can
    be compiled by GWT (no Hibernate enhanced classes, no use of
    "<code>super.clone()</code>",...).</para>

    <para>When the commands are included in a separate module, you should
    assure the sources are available as these are needed for GWT compilation.
    This can easily be done using the Maven source plug-in.</para>

	  <!--In stead of include, copy example code from a pom.xml -->
    <!--<xi:include href="listing/MavenSourcePlugin.xml"-->
                <!--xmlns:xi="http://www.w3.org/2001/XInclude" />-->
	  <example id="MavenSourcePlugin">
		  <title>Maven source plugin</title>
		  <programlisting language="java"><![CDATA[<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-source-plugin</artifactId>
    <version>2.1.2</version>
    <executions>
        <execution>
            <goals>
                <goal>jar</goal>
            </goals>
            <configuration>
                <includePom>true</includePom>
            </configuration>
        </execution>
    </executions>
</plugin>]]></programlisting>
	  </example>

    <para>Actually including the sources can then be done using a dependency
    like the following (this includes the staticsecurity module, both the
    actual code and the sources). You could set "provided" scope on the source
    dependency to exclude it from the war file. However, this may prevent use
    of GWT development mode.</para>

	  <!--In stead of include, copy example code from a pom.xml -->
    <!--<xi:include href="listing/StaticSecurityDependency.xml"-->
                <!--xmlns:xi="http://www.w3.org/2001/XInclude" />-->
	  <example id="StaticSecurityDependency">
		  <title>staticsecurity source plugin - including source</title>
		  <programlisting language="xml"><![CDATA[<dependency>
    <groupId>org.geomajas.plugin</groupId>
    <artifactId>geomajas-plugin-staticsecurity</artifactId>
    <version>${geomajas-plugin-staticsecurity-version}</version>
</dependency>
<dependency>
    <groupId>org.geomajas.plugin</groupId>
    <artifactId>geomajas-plugin-staticsecurity</artifactId>
    <version>${geomajas-plugin-staticsecurity-version}</version>
    <classifier>sources</classifier>
</dependency>]]></programlisting>
	  </example>
    <para />
  </chapter>

  <chapter id="ch-howto-security-service">
      <title>Writing your own security service</title>

      <para>A security plug-in provides an implementation of the
      <code>org.geomajas.security.SecurityService</code> interface. The work
      is done in the <code>getAuthentication</code> method which returns an
      <code>Authentication</code> object for a token string. The server does
      not (need to) know how tokens are generated. This is the responsibility
      of the client. In the case of the GWT2 client, this is done using the
      <code>setTokenRequestHandler</code> method on
      <code>GwtCommandDispatcher</code>.</para>

      <para>The task of the security service is to read the policies and
      convert these into an <code>Authorization</code> objects. These contain
      methods to test whether certain operations are allowed or not. The
      different <code>Authorization</code> objects are combined by the
      <code>SecurityManager</code> into the <code>SecurityContext</code>,
      which can be injected in the code.</para>

      <para>The security service which is provided by the plug-in can then be
      used in the security configuration (see <link
      linkend="ch-secConf">chapter <xref
      linkend="ch-secConf" /></link>).</para>

      <para>For the implementation of your Authorization class, it is
      important to assure that the instances are serializeable and can also be
      deserialized. This is important to allow the caching to be clustered.
      While we don't require that the class implements
      <code>Serializeable</code> (thanks to the use of JBoss Serialization),
      you should think of the following points;</para>

      <itemizedlist>
        <listitem>
          <para>A no-arguments constructor is needed. This is allowed to be
          private (though that is not recommended, better make it protected if
          you don't want it to be generally used).</para>
        </listitem>

        <listitem>
          <para>If the authorization class is an inner class, do make it
          static if possible (otherwise the object has an implicit reference
          to the containing object, assuring it is included in the serialized
          state). The inner class should not be private as this cannot be
          deserialized.</para>
        </listitem>

        <listitem>
          <para>If you need a logger, declare it as<programlisting>private final transient Logger log = LoggerFactory.getLogger(ClassName.class);</programlisting>to
          ensure that the logger is not serialized.</para>
        </listitem>

        <listitem>
          <para>You should not use auto-wiring. Instead, make sure your class
          implements <code>AuthorizationNeedsWiring</code>. This defined the
          <code>wire()</code> method which allows you to query the application
          context. Make sure you declare wired properties as transient. The
          <code>wire()</code> method is called when the authorization is
          attached to the <code>SecurityContext</code> (both for freshly
          created and deserialized instances).</para>
        </listitem>
      </itemizedlist>
  </chapter>

  <chapter>
    <title>Adding your own GWT service as a MVC controller</title>

    <para>When integrating Geomajas with an existing GWT application, you can
    add your existing GWT-RPC service to the application context as an MVC
    controller.</para>

    <section>
      <title>Create the MVC controller</title>

      <para>The code for creating an MVC controller can be based on the
      <code>GeomajasController</code> class (see <ulink
      url="http://grepcode.com/file/repo1.maven.org/maven2/org.geomajas/geomajas-client-common-gwt-command/2.2.0/org/geomajas/gwt/server/mvc/GeomajasController.java">GeomajasController.java</ulink>).
      Start by implementing your service (e.g. <code>MyService</code>) as a
      bean and autowiring it in a new controller:<programlisting>@Controller("/myService")
@Api
public class MyController extends RemoteServiceServlet
              implements MyService, ServletConfigAware {

  private static final long serialVersionUID = 100L;

  @Autowired
  private MyService myService;

  @Autowired(required = false)
  private ServletContext servletContext;
  
  private SerializationPolicyLocator serializationPolicyLocator;

  @RequestMapping("/myService")
  public ModelAndView handleRequest(HttpServletRequest request,
              HttpServletResponse response) throws Exception {
    doPost(request, response);
    return null;
  }

  // put delegation methods here
  void myMethod() {
    myService.myMethod();
  }

  ....

  public ServletContext getServletContext() {
    if (null == servletContext) {
      throw new IllegalStateException(
              "getServletContext() cannot be used outside web context");
    }
    return servletContext;
  }

  public void setServletConfig(ServletConfig servletConfig) {
    try {
      super.init(servletConfig);
    } catch (ServletException e) {
      throw new IllegalStateException("init(servletConfig) failed", e);
    }
  }
}</programlisting></para>

      <para>Use the url path of your choice in both the controller name and
      the request mapping value.</para>
    </section>

    <section>
      <title>Add the controller to the web context</title>

      <para>To add a controller to the web context, create a controller
      configuration file <code>mycontroller.xml</code> with the following
      content:
          <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
              xmlns:mvc="http://www.springframework.org/schema/mvc"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns:context="http://www.springframework.org/schema/context"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-2.0.xsd">

  <context:component-scan base-package="<path.to.you.controller.package>" />

</beans>]]></programlisting>Use the correct scanning package here. This
      file can be put in WEB-INF and added to the config locations of the
      dispatcher servlet in your <code>web.xml:</code></para>

      <programlisting language="xml"><![CDATA[<servlet>
  <servlet-name>dispatcher</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  <init-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:org/geomajas/spring/geomajasWebContext.xml
      WEB-INF/mycontroller.xml
    </param-value>
    <description>Spring Web-MVC specific (additional) context files.</description>
  </init-param>
  <load-on-startup>3</load-on-startup>
</servlet>]]></programlisting>
    </section>

    <section>
      <title>Access your RPC service from the client</title>

      <para>To access your GWT-RPC service, create a proxy as
      usual:<programlisting>MyServiceAsync service = (MyServiceAsync) GWT.create(MyService.class);
ServiceDefTarget endpoint = (ServiceDefTarget) service;
endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + "myService");</programlisting></para>
    </section>
  </chapter>

  <chapter id="ch-howto-logging">
    <title>Setting up logging to a file</title>

    <para>This is not really Geomajas specific, but as a simple guide, a
    configuration which can be used to setup logging to a file, using logback
    as the logging framework:</para>

    <programlisting>&lt;configuration debug="true"&gt;

  &lt;appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;
    &lt;file&gt;/var/log/ktunaxa/log.txt&lt;/file&gt;
    &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;
      &lt;!-- rollover daily --&gt;
      &lt;fileNamePattern&gt;/var/log/ktunaxa/log-%d{yyyy-MM-dd}.%i.gz&lt;/fileNamePattern&gt; &lt;!-- zipped! --&gt;  
      &lt;maxHistory&gt;60&lt;/maxHistory&gt; &lt;!-- keep logs two months --&gt;
      &lt;timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;
        &lt;!-- or whenever the file size reaches 20MB --&gt;
        &lt;maxFileSize&gt;20MB&lt;/maxFileSize&gt;
      &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;
    &lt;/rollingPolicy&gt;

    &lt;encoder&gt;
      &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
      &lt;charset&gt;UTF-8&lt;/charset&gt;
    &lt;/encoder&gt;
  &lt;/appender&gt;

  &lt;logger name="org.geomajas" level="DEBUG"/&gt;

  &lt;root level="INFO"&gt;
    &lt;appender-ref ref="FILE"/&gt;
  &lt;/root&gt;

&lt;/configuration&gt;</programlisting>

    <para>Some comments<itemizedlist>
        <listitem>
          <para>Daily rolling log and also rolls when larger than 20MB.</para>
        </listitem>

        <listitem>
          <para>Previous logs are zipped using gzip.</para>
        </listitem>

        <listitem>
          <para>Two months worth or logs are kept (60 days to be
          precise).</para>
        </listitem>

        <listitem>
          <para>This example does enable debug logging. This is not really
          recommended in production!</para>
        </listitem>

        <listitem>
          <para>The default log level is set to INFO. This is recommended. Do
          not set the logging OFF as this will also hide all warnings and
          errors. If you think INFO is too verbose, use WARN (and maybe start
          a discussion in the project to see whether the log level is correct
          for the messages).</para>
        </listitem>
      </itemizedlist></para>
  </chapter>

  <chapter>
    <title id="ch-howto-snapshots">Using snapshots</title>

    <para>To be able to use snapshots, you have to include the snapshot
    repository in your pom, in the repositories section:</para>

    <example>
      <title>Including the snapshot repository</title>

      <programlisting>&lt;repository&gt;
    &lt;id&gt;Geomajas-latest&lt;/id&gt;
    &lt;name&gt;Geomajas snapshot repository&lt;/name&gt;
    &lt;url&gt;http://repo.geomajas.org/nexus/content/groups/latest/&lt;/url&gt;
    &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
    &lt;/snapshots&gt;
&lt;/repository&gt;</programlisting>
    </example>

    <para>You can now overwrite the version of Geomajas parts
    by putting them in the dependencyManagement section
    <emphasis>before</emphasis> the general geomajas-project-server dependency. For example, to
    use the latest version of the staticsecurity plugin, the
    dependencyManagement would look like this:</para>

    <example>
      <title>Overwriting version when using geomajas-project-server pom dependency</title>

        <programlisting language="xml"><![CDATA[
<dependencyManagement>
  <dependencies>
    ...
    <!-- place overwriting version before pom dependency-->
    <dependency>
      <groupId>org.geomajas.plugin</groupId>
      <artifactId>geomajas-plugin-staticsecurity</artifactId>
      <version>SNAPSHOT.VERSION</version>
    </dependency>
    ...
    <dependency>
      <groupId>org.geomajas.project</groupId>
      <artifactId>geomajas-project-server</artifactId>
      <version>RELEASE.VERSION</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
    ...
  </dependencies>
</dependencyManagement>]]></programlisting>
    </example>
  </chapter>

  <chapter>
    <title>Set up cross-context communication between GWT client and another web
    application</title>

    <para>In some cases it may be necessary to put the Geomajas server on a
    different server node (B) than the one that contains the HTML page (A). As
    long as that node B is located in the same domain, such a situation can be
    handled without taking recourse to cross-domain communication hacks.</para>

      <para> Two measures have to be taken to ensure succesful cross-context communication:</para>

    <orderedlist>
      <listitem>
        <para>The GWT client should direct its requests to a different URL. This
        can be done by calling the following method on the
        <code>GwtCommandDispatcher</code> instance: <programlisting>public void setServiceEndPointUrl(String url) </programlisting>The
        url should be the absolute service URL of the cross-context server
        (B)</para>
      </listitem>

      <listitem>
        <para>The cross-context server (B) should have a
        <code>GeomajasController</code> in the web constext that is especially configured to
        accept the gwt.rpc policy file of the compiled GWT
        client:

            <programlisting language="xml"><![CDATA[<bean name="/geomajasService" class="org.geomajas.gwt.server.mvc.GeomajasController">
 <property name="serializationPolicyLocator">
  <bean class="org.geomajas.gwt.server.mvc.ResourceSerializationPolicyLocator">
   <property name="policyRoots">
    <list>
     <value>WEB-INF/policies/</value>
    </list>
   </property>
  </bean>
 </property>
</bean>]]></programlisting>
         The policy file is the file with extension
        <code>.gwt.rpc</code> that is obtained after the GWT compilation
        process. For the above configuration it should be copied to the folder
        <code>WEB-INF/policies</code> in the web root of B.</para>
      </listitem>
    </orderedlist>

    <para>This solution can also be useful if there is a library conflict
    between the Geomajas server and other parts of the application. In such
    cases web service communication or communication via javascript may be
    your best option.</para>
  </chapter>
</part>
